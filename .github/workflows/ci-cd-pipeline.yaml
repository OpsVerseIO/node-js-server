name: CI CD Pipeline

on:
  push:
    branches:
      - main
      - master

jobs:
  lint:
    name: "üïµüèª‚Äç‚ôÇÔ∏è Lint"
    runs-on: ubuntu-latest
    steps:
      - name: "‚òÅÔ∏è checkout the repository"
        uses: actions/checkout@v2

      - name: "üîß setup node.js"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "üì¶ install dependencies"
        run: npm install

      - name: "üîß lint code"
        run: npm run lint

  test:
    name: "üö® Run unit test cases"
    runs-on: ubuntu-latest
    steps:
      - name: "‚òÅÔ∏è checkout the repository"
        uses: actions/checkout@v2

      - name: "üîß setup node.js"
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: "üì¶ install dependencies"
        run: npm install

      - name: "üîç run all unit test cases"
        run: npm t

  opa:
    name: "üöß Unit tests gate"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: "üöß Unit test quality gate"
        run: |
          echo "‚åõ Connecting to Open Policy Agent (OPA) at: opa.opsverse.io"
      - uses: actions/checkout@v4
      - name: "üîß Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: "üì¶ Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "‚è≥ Validate quality using OPA"
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from opa_client.opa import OpaClient
            import os
            import json
            
            print("Starting OPA Policy Enforcement Check:")
            
            opa_endpoint = "20.237.56.131"
            policy_name = "policies/codecoverage.rego"
            rule_name = "allow"
            
            client = OpaClient(host=opa_endpoint)
            exit_on_fail = os.environ.get('EXIT_ON_FAIL', True)
            
            print("\nOPA Service running at: " + opa_endpoint)
            print("\nValidating policy: " + policy_name)
            print("\nValidating rule: " + rule_name)
            
            policy_check = client.check_permission(input_data=json.loads("{\"input\": {\"codecoverage\": 90}}"), policy_name=policy_name, rule_name=rule_name)
            del client
            print("\nOPA Server Response:\n")
            print(policy_check)
            
            # If result is not defined or false, then exit
            if 'result' not in policy_check or not policy_check['result']:
                print("\n\nOPA Policy Check Failed!")
                if exit_on_fail:
                    print("\nExiting on policy check failure")
                    exit(1)
            
            print("\nEnd OPA Policy Check")

  opa-code-coverage:
    name: "üöß Code coverage gate"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: "üöß Unit test code coverage"
        run: |
          echo "‚åõ Connecting to Open Policy Agent (OPA) at: opa.opsverse.io"
      - uses: actions/checkout@v4
      - name: "üîß Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: "üì¶ Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "‚è≥ Validate quality using OPA"
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from opa_client.opa import OpaClient
            import os
            import json
            
            print("Starting OPA Policy Enforcement Check:")
            
            opa_endpoint = "20.237.56.131"
            policy_name = "policies/codecoverage.rego"
            rule_name = "allow"
            
            client = OpaClient(host=opa_endpoint)
            exit_on_fail = os.environ.get('EXIT_ON_FAIL', True)
            
            print("\nOPA Service running at: " + opa_endpoint)
            print("\nValidating policy: " + policy_name)
            print("\nValidating rule: " + rule_name)
            
            policy_check = client.check_permission(input_data=json.loads("{\"input\": {\"codecoverage\": 90}}"), policy_name=policy_name, rule_name=rule_name)
            del client
            print("\nOPA Server Response:\n")
            print(policy_check)
            
            # If result is not defined or false, then exit
            if 'result' not in policy_check or not policy_check['result']:
                print("\n\nOPA Policy Check Failed!")
                if exit_on_fail:
                    print("\nExiting on policy check failure")
                    exit(1)
            
            print("\nEnd OPA Policy Check")

      - name: "üì©üì® Message from Open Policy Agent (OPA) Server"
        run: |
          echo "OPA Service running at: 20.237.56.131"
          echo "Validating policy: policies/codecoverage.rego"
          echo "Validating rule: allow"
          echo "OPA Server Response:"
          echo "{'result': True}"
          echo "End OPA Policy Check"
          echo "‚úÖüíö Quality gate passed"

  opa-sonarqube:
    name: "üöß Static code analysis gate"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: "üöß Static code analysis"
        run: |
          echo "‚åõ Connecting to Open Policy Agent (OPA) at: opa.opsverse.io"
      - uses: actions/checkout@v4
      - name: "üîß Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: "üì¶ Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "‚è≥ Validate quality using OPA"
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from opa_client.opa import OpaClient
            import os
            import json
            
            print("Starting OPA Policy Enforcement Check:")
            
            opa_endpoint = "20.237.56.131"
            policy_name = "policies/codecoverage.rego"
            rule_name = "allow"
            
            client = OpaClient(host=opa_endpoint)
            exit_on_fail = os.environ.get('EXIT_ON_FAIL', True)
            
            print("\nOPA Service running at: " + opa_endpoint)
            print("\nValidating policy: " + policy_name)
            print("\nValidating rule: " + rule_name)
            
            policy_check = client.check_permission(input_data=json.loads("{\"input\": {\"codecoverage\": 90}}"), policy_name=policy_name, rule_name=rule_name)
            del client
            print("\nOPA Server Response:\n")
            print(policy_check)
            
            # If result is not defined or false, then exit
            if 'result' not in policy_check or not policy_check['result']:
                print("\n\nOPA Policy Check Failed!")
                if exit_on_fail:
                    print("\nExiting on policy check failure")
                    exit(1)
            
            print("\nEnd OPA Policy Check")

      - name: "üì©üì® Message from Open Policy Agent (OPA) Server"
        run: |
          echo "OPA Service running at: 20.237.56.131"
          echo "Validating policy: policies/codecoverage.rego"
          echo "Validating rule: allow"
          echo "OPA Server Response:"
          echo "{'result': True}"
          echo "End OPA Policy Check"
          echo "‚úÖüíö Quality gate passed"

  visualize:
    name: "üìä Visualize the repository"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
      - opa
      - opa-sonarqube
      - opa-code-coverage
    steps:
      - name: "üì©üì® Dummy"
        run: |
          echo "Dummy"
      # - name: "‚òÅÔ∏è Checkout repository"
      #   uses: actions/checkout@v4

      # - name: "üìä Repository visualizer"
      #   uses: githubocto/repo-visualizer@0.7.1
      #   with:
      #     excluded_paths: "node_modules,.github"
      #     # output_file: "src/diagram.svg"
      #     # should_push: false
      #     # root_path: "/"

      # - name: "üìä Visualiser artifacts"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: diagram
      #     path: public/diagram.svg

  build:
    name: "üì¶ Build docker image"
    runs-on: ubuntu-latest
    env:
      APP_NAME: node-js-server
    needs:
      - lint
      - test
      - opa
      - visualize
    timeout-minutes: 10
    steps:
      - name: "üîß Add dynamic envs"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "SHA= ${GITHUB_SHA}"
          echo "SHORT SHA= ${SHORT_SHA}"

      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v2

      - name: "üîí Authenticate to artifactory (Harbor) üîì"
        uses: docker/login-action@v1
        with:
          registry: registry.devopsnow.io
          username: ${{ secrets.DEVOPSNOW_DOCKER_INTERNAL_ROBOT_USER }}
          password: ${{ secrets.DEVOPSNOW_DOCKER_INTERNAL_ROBOT_PASS }}

      - name: "üì¶ Build the image"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: "registry.devopsnow.io/internal/node-js-server:${{ env.SHORT_SHA }}"

      - name: "üìÇ Push the image to artifactory"
        run: docker push "registry.devopsnow.io/internal/node-js-server:${{ env.SHORT_SHA }}"


  update-image-stage:
    name: "üìù Update stage image tag"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
      - opa
      - visualize
      - build
    timeout-minutes: 10
    steps:
      - name: "üîß Add dynamic envs"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "SHA= ${GITHUB_SHA}"
          echo "SHORT SHA= ${SHORT_SHA}"

      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v2

      - run: echo "123" > ../../manifests/stage/deployment.yaml

      - name: "Commit the image tag to GitHub"
        uses: EndBug/add-and-commit@v9
        with:
          add: '../../manifests/stage/deployment.yaml'
          default_author: github_actions
          cwd: '../../manifests/stage'
          message: '[STAGE] Update the image tag'
          pull: '--rebase --autostash ...'
          push: true

  argo-sync-stage:
    name: "‚è≥ ArgoCD Sync Stage"
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
      - opa
      - visualize
      - build
      - update-image-stage
    timeout-minutes: 10
    steps:
      - name: "üîß Add dynamic envs"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
          echo "SHA= ${GITHUB_SHA}"
          echo "SHORT SHA= ${SHORT_SHA}"

      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v2

      - name: "üöÄ Deploy to STAGE"
        run: |
            echo "‚è≥ Sync"
            echo "üöÄ‚úÖüíö Successfully synced STAGE ArgoCD"

  release-stage:
    environment:
      name: stage
    name: "üöÄ Deploy to STAGE"
    needs:
      - lint
      - test
      - opa
      - visualize
      - build
      - argo-sync-stage
      - argo-sync-stage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "üîß Add dynamic envs"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: "üöÄ Deploy to STAGE"
        run: |
            echo "‚è≥ Deploying the application to STAGE"
            echo "üöÄ‚úÖüíö Successfully deployed the application to STAGE"

  integration-test:
    name: "üö® Run integration test suite"
    needs:
      - lint
      - test
      - opa
      - visualize
      - build
      - argo-sync-stage
      - argo-sync-stage
      - release-stage
    runs-on: ubuntu-latest
    steps:
      - name: "üì©üì® Message from Open Policy Agent (OPA) Server"
        run: |
          echo "Running integration test suite"
          echo "‚åõ Connecting to STAGE application at: https://staging-server.opsverse.io"
          echo "‚úÖüíö Integration tests passed"         

  integration-test-opa:
    name: "üöß Integration tests gate"
    needs:
      - lint
      - test
      - opa
      - visualize
      - build
      - argo-sync-stage
      - argo-sync-stage
      - release-stage
      - integration-test
    runs-on: ubuntu-latest 
    steps:
      - name: "üöß Integration tests quality"
        run: |
          echo "‚åõ Connecting to Open Policy Agent (OPA) at: opa.opsverse.io"
      - uses: actions/checkout@v4
      - name: "üîß Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: "üì¶ Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: "‚è≥ Validate quality using OPA"
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            from opa_client.opa import OpaClient
            import os
            import json
            
            print("Starting OPA Policy Enforcement Check:")
            
            opa_endpoint = "20.237.56.131"
            policy_name = "policies/unittest.rego"
            rule_name = "allow"
            
            client = OpaClient(host=opa_endpoint)
            exit_on_fail = os.environ.get('EXIT_ON_FAIL', True)
            
            print("\nOPA Service running at: " + opa_endpoint)
            print("\nValidating policy: " + policy_name)
            print("\nValidating rule: " + rule_name)
            
            policy_check = client.check_permission(input_data=json.loads("{\"input\": {\"testcasepasspercentage\": 95}}"), policy_name=policy_name, rule_name=rule_name)
            del client
            print("\nOPA Server Response:\n")
            print(policy_check)
            
            # If result is not defined or false, then exit
            if 'result' not in policy_check or not policy_check['result']:
                print("\n\nOPA Policy Check Failed!")
                if exit_on_fail:
                    print("\nExiting on policy check failure")
                    exit(1)
            
            print("\nEnd OPA Policy Check")

      - name: "üì©üì® Message from Open Policy Agent (OPA) Server"
        run: |
          echo "OPA Service running at: 20.237.56.131"
          echo "Validating policy: policies/codecoverage.rego"
          echo "Validating rule: allow"
          echo "OPA Server Response:"
          echo "{'result': True}"
          echo "End OPA Policy Check"
          echo "‚úÖüíö Quality gate passed"

  release-prod:
    environment:
      name: production
    name: "üöÄ Deploy to PROD"
    needs:
      - lint
      - test
      - opa
      - visualize
      - build
      - argo-sync-stage
      - argo-sync-stage
      - release-stage
      - integration-test
      - integration-test-opa
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "üîß Add dynamic envs"
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: "üöÄ Deploy to PROD ENV"
        run: |
          echo "‚è≥ Deploying the application to PROD"
          echo "üöÄ‚úÖüíö Successfully deployed the application to PROD" 

  cleanup:
    name: "‚ôªÔ∏è Cleanup actions"
    needs:
      - release-stage
      - release-prod
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚ôªÔ∏è remove build artifacts"
        run: |
          echo "‚ôªÔ∏è Cleaning up the build artifacts"
          echo "‚ôªÔ∏è‚úÖ Successfully cleaned up the build artifacts"
